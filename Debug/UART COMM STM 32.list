
UART COMM STM 32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003764  08003764  00004764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037ac  080037ac  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080037ac  080037ac  000047ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037b4  080037b4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b4  080037b4  000047b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037b8  080037b8  000047b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  080037c8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080037c8  000050b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a49d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000176c  00000000  00000000  0000f4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00010c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c8  00000000  00000000  00011520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a47  00000000  00000000  00011be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a911  00000000  00000000  0003962f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f42b1  00000000  00000000  00043f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001381f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002364  00000000  00000000  00138234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0013a598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800374c 	.word	0x0800374c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800374c 	.word	0x0800374c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa07 	bl	80008f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f812 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f892 	bl	8000610 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004ec:	f000 f862 	bl	80005b4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_UART_Receive_IT(&hlpuart1, rx_data, 6);
 80004f0:	4b04      	ldr	r3, [pc, #16]	@ (8000504 <main+0x28>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2206      	movs	r2, #6
 80004f6:	4619      	mov	r1, r3
 80004f8:	4803      	ldr	r0, [pc, #12]	@ (8000508 <main+0x2c>)
 80004fa:	f002 f953 	bl	80027a4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fe:	bf00      	nop
 8000500:	e7fd      	b.n	80004fe <main+0x22>
 8000502:	bf00      	nop
 8000504:	200000b0 	.word	0x200000b0
 8000508:	20000028 	.word	0x20000028

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b096      	sub	sp, #88	@ 0x58
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2244      	movs	r2, #68	@ 0x44
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f003 f8ea 	bl	80036f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	463b      	mov	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800052e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000532:	f000 fcf1 	bl	8000f18 <HAL_PWREx_ControlVoltageScaling>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800053c:	f000 f8e4 	bl	8000708 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000540:	2310      	movs	r3, #16
 8000542:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800054c:	2360      	movs	r3, #96	@ 0x60
 800054e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	2302      	movs	r3, #2
 8000552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000554:	2301      	movs	r3, #1
 8000556:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000558:	2301      	movs	r3, #1
 800055a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 800055c:	2347      	movs	r3, #71	@ 0x47
 800055e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000568:	2306      	movs	r3, #6
 800056a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fd37 	bl	8000fe4 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800057c:	f000 f8c4 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2303      	movs	r3, #3
 8000586:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000590:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000596:	463b      	mov	r3, r7
 8000598:	2102      	movs	r1, #2
 800059a:	4618      	mov	r0, r3
 800059c:	f001 f93c 	bl	8001818 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005a6:	f000 f8af 	bl	8000708 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3758      	adds	r7, #88	@ 0x58
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005ba:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <MX_LPUART1_UART_Init+0x54>)
 80005bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80005be:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_LPUART1_UART_Init+0x58>)
 80005c2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005d8:	220c      	movs	r2, #12
 80005da:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005de:	2200      	movs	r2, #0
 80005e0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	@ (8000604 <MX_LPUART1_UART_Init+0x50>)
 80005f0:	f002 f800 	bl	80025f4 <HAL_UART_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 80005fa:	f000 f885 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000028 	.word	0x20000028
 8000608:	40008000 	.word	0x40008000
 800060c:	00033324 	.word	0x00033324

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	4a2a      	ldr	r2, [pc, #168]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000632:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a24      	ldr	r2, [pc, #144]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000656:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a1e      	ldr	r2, [pc, #120]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 800065c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800066e:	f000 fca9 	bl	8000fc4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a17      	ldr	r2, [pc, #92]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2180      	movs	r1, #128	@ 0x80
 800068e:	4812      	ldr	r0, [pc, #72]	@ (80006d8 <MX_GPIO_Init+0xc8>)
 8000690:	f000 fc1c 	bl	8000ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000694:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <MX_GPIO_Init+0xcc>)
 80006aa:	f000 fa7d 	bl	8000ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006ae:	2380      	movs	r3, #128	@ 0x80
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ba:	2302      	movs	r3, #2
 80006bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_GPIO_Init+0xc8>)
 80006c6:	f000 fa6f 	bl	8000ba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	@ 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000
 80006d8:	48000400 	.word	0x48000400
 80006dc:	48000800 	.word	0x48000800

080006e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  HAL_UART_Transmit(&hlpuart1, rx_data, 6,10);
 80006e8:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <HAL_UART_RxCpltCallback+0x20>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	230a      	movs	r3, #10
 80006f0:	2206      	movs	r2, #6
 80006f2:	4804      	ldr	r0, [pc, #16]	@ (8000704 <HAL_UART_RxCpltCallback+0x24>)
 80006f4:	f001 ffcc 	bl	8002690 <HAL_UART_Transmit>
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000b0 	.word	0x200000b0
 8000704:	20000028 	.word	0x20000028

08000708 <Error_Handler>:
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <Error_Handler+0x8>

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <HAL_MspInit+0x44>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800071e:	4a0e      	ldr	r2, [pc, #56]	@ (8000758 <HAL_MspInit+0x44>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6613      	str	r3, [r2, #96]	@ 0x60
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <HAL_MspInit+0x44>)
 8000728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <HAL_MspInit+0x44>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000736:	4a08      	ldr	r2, [pc, #32]	@ (8000758 <HAL_MspInit+0x44>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073c:	6593      	str	r3, [r2, #88]	@ 0x58
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <HAL_MspInit+0x44>)
 8000740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b0ac      	sub	sp, #176	@ 0xb0
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	228c      	movs	r2, #140	@ 0x8c
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f002 ffb9 	bl	80036f4 <memset>
  if(huart->Instance==LPUART1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a22      	ldr	r2, [pc, #136]	@ (8000810 <HAL_UART_MspInit+0xb4>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d13d      	bne.n	8000808 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800078c:	2320      	movs	r3, #32
 800078e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000790:	2300      	movs	r3, #0
 8000792:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fa61 	bl	8001c60 <HAL_RCCEx_PeriphCLKConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007a4:	f7ff ffb0 	bl	8000708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <HAL_UART_MspInit+0xb8>)
 80007aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80007ac:	4a19      	ldr	r2, [pc, #100]	@ (8000814 <HAL_UART_MspInit+0xb8>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80007b4:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <HAL_UART_MspInit+0xb8>)
 80007b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <HAL_UART_MspInit+0xb8>)
 80007c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c4:	4a13      	ldr	r2, [pc, #76]	@ (8000814 <HAL_UART_MspInit+0xb8>)
 80007c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <HAL_UART_MspInit+0xb8>)
 80007ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80007d8:	f000 fbf4 	bl	8000fc4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80007dc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80007e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80007f6:	2308      	movs	r3, #8
 80007f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000800:	4619      	mov	r1, r3
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <HAL_UART_MspInit+0xbc>)
 8000804:	f000 f9d0 	bl	8000ba8 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000808:	bf00      	nop
 800080a:	37b0      	adds	r7, #176	@ 0xb0
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40008000 	.word	0x40008000
 8000814:	40021000 	.word	0x40021000
 8000818:	48001800 	.word	0x48001800

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <NMI_Handler+0x4>

08000824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <MemManage_Handler+0x4>

08000834 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <UsageFault_Handler+0x4>

08000844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000872:	f000 f893 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	@ (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a4:	f7ff ffea 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	@ (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	@ (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	@ (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ce:	f002 ff19 	bl	8003704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008d2:	f7ff fe03 	bl	80004dc <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008d8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e4:	080037bc 	.word	0x080037bc
  ldr r2, =_sbss
 80008e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008ec:	200000b8 	.word	0x200000b8

080008f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_2_IRQHandler>

080008f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f91f 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000902:	2000      	movs	r0, #0
 8000904:	f000 f80e 	bl	8000924 <HAL_InitTick>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	71fb      	strb	r3, [r7, #7]
 8000912:	e001      	b.n	8000918 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000914:	f7ff fefe 	bl	8000714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000918:	79fb      	ldrb	r3, [r7, #7]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <HAL_InitTick+0x6c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d023      	beq.n	8000980 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000938:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <HAL_InitTick+0x70>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <HAL_InitTick+0x6c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000946:	fbb3 f3f1 	udiv	r3, r3, r1
 800094a:	fbb2 f3f3 	udiv	r3, r2, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f91d 	bl	8000b8e <HAL_SYSTICK_Config>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d10f      	bne.n	800097a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d809      	bhi.n	8000974 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f8f5 	bl	8000b56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800096c:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <HAL_InitTick+0x74>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
 8000972:	e007      	b.n	8000984 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	73fb      	strb	r3, [r7, #15]
 8000978:	e004      	b.n	8000984 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
 800097e:	e001      	b.n	8000984 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000984:	7bfb      	ldrb	r3, [r7, #15]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008
 8000994:	20000000 	.word	0x20000000
 8000998:	20000004 	.word	0x20000004

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000008 	.word	0x20000008
 80009c0:	200000b4 	.word	0x200000b4

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	@ (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	200000b4 	.word	0x200000b4

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	@ (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	@ 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	@ 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b0c:	d301      	bcc.n	8000b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00f      	b.n	8000b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <SysTick_Config+0x40>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f7ff ff8e 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <SysTick_Config+0x40>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <SysTick_Config+0x40>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff47 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff5c 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff8e 	bl	8000a94 <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5d 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffb0 	bl	8000afc <SysTick_Config>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb6:	e166      	b.n	8000e86 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f000 8158 	beq.w	8000e80 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d005      	beq.n	8000be8 <HAL_GPIO_Init+0x40>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d130      	bne.n	8000c4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68da      	ldr	r2, [r3, #12]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c1e:	2201      	movs	r2, #1
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	091b      	lsrs	r3, r3, #4
 8000c34:	f003 0201 	and.w	r2, r3, #1
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d017      	beq.n	8000c86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	2203      	movs	r2, #3
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d123      	bne.n	8000cda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	08da      	lsrs	r2, r3, #3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3208      	adds	r2, #8
 8000c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	220f      	movs	r2, #15
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	691a      	ldr	r2, [r3, #16]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	08da      	lsrs	r2, r3, #3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3208      	adds	r2, #8
 8000cd4:	6939      	ldr	r1, [r7, #16]
 8000cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0203 	and.w	r2, r3, #3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 80b2 	beq.w	8000e80 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1c:	4b61      	ldr	r3, [pc, #388]	@ (8000ea4 <HAL_GPIO_Init+0x2fc>)
 8000d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d20:	4a60      	ldr	r2, [pc, #384]	@ (8000ea4 <HAL_GPIO_Init+0x2fc>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d28:	4b5e      	ldr	r3, [pc, #376]	@ (8000ea4 <HAL_GPIO_Init+0x2fc>)
 8000d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d34:	4a5c      	ldr	r2, [pc, #368]	@ (8000ea8 <HAL_GPIO_Init+0x300>)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	089b      	lsrs	r3, r3, #2
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d5e:	d02b      	beq.n	8000db8 <HAL_GPIO_Init+0x210>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a52      	ldr	r2, [pc, #328]	@ (8000eac <HAL_GPIO_Init+0x304>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d025      	beq.n	8000db4 <HAL_GPIO_Init+0x20c>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a51      	ldr	r2, [pc, #324]	@ (8000eb0 <HAL_GPIO_Init+0x308>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d01f      	beq.n	8000db0 <HAL_GPIO_Init+0x208>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a50      	ldr	r2, [pc, #320]	@ (8000eb4 <HAL_GPIO_Init+0x30c>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d019      	beq.n	8000dac <HAL_GPIO_Init+0x204>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a4f      	ldr	r2, [pc, #316]	@ (8000eb8 <HAL_GPIO_Init+0x310>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d013      	beq.n	8000da8 <HAL_GPIO_Init+0x200>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a4e      	ldr	r2, [pc, #312]	@ (8000ebc <HAL_GPIO_Init+0x314>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d00d      	beq.n	8000da4 <HAL_GPIO_Init+0x1fc>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a4d      	ldr	r2, [pc, #308]	@ (8000ec0 <HAL_GPIO_Init+0x318>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d007      	beq.n	8000da0 <HAL_GPIO_Init+0x1f8>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a4c      	ldr	r2, [pc, #304]	@ (8000ec4 <HAL_GPIO_Init+0x31c>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d101      	bne.n	8000d9c <HAL_GPIO_Init+0x1f4>
 8000d98:	2307      	movs	r3, #7
 8000d9a:	e00e      	b.n	8000dba <HAL_GPIO_Init+0x212>
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	e00c      	b.n	8000dba <HAL_GPIO_Init+0x212>
 8000da0:	2306      	movs	r3, #6
 8000da2:	e00a      	b.n	8000dba <HAL_GPIO_Init+0x212>
 8000da4:	2305      	movs	r3, #5
 8000da6:	e008      	b.n	8000dba <HAL_GPIO_Init+0x212>
 8000da8:	2304      	movs	r3, #4
 8000daa:	e006      	b.n	8000dba <HAL_GPIO_Init+0x212>
 8000dac:	2303      	movs	r3, #3
 8000dae:	e004      	b.n	8000dba <HAL_GPIO_Init+0x212>
 8000db0:	2302      	movs	r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x212>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e000      	b.n	8000dba <HAL_GPIO_Init+0x212>
 8000db8:	2300      	movs	r3, #0
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	f002 0203 	and.w	r2, r2, #3
 8000dc0:	0092      	lsls	r2, r2, #2
 8000dc2:	4093      	lsls	r3, r2
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dca:	4937      	ldr	r1, [pc, #220]	@ (8000ea8 <HAL_GPIO_Init+0x300>)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec8 <HAL_GPIO_Init+0x320>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dfc:	4a32      	ldr	r2, [pc, #200]	@ (8000ec8 <HAL_GPIO_Init+0x320>)
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e02:	4b31      	ldr	r3, [pc, #196]	@ (8000ec8 <HAL_GPIO_Init+0x320>)
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e26:	4a28      	ldr	r2, [pc, #160]	@ (8000ec8 <HAL_GPIO_Init+0x320>)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e2c:	4b26      	ldr	r3, [pc, #152]	@ (8000ec8 <HAL_GPIO_Init+0x320>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec8 <HAL_GPIO_Init+0x320>)
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <HAL_GPIO_Init+0x320>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e7a:	4a13      	ldr	r2, [pc, #76]	@ (8000ec8 <HAL_GPIO_Init+0x320>)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f47f ae91 	bne.w	8000bb8 <HAL_GPIO_Init+0x10>
  }
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010000 	.word	0x40010000
 8000eac:	48000400 	.word	0x48000400
 8000eb0:	48000800 	.word	0x48000800
 8000eb4:	48000c00 	.word	0x48000c00
 8000eb8:	48001000 	.word	0x48001000
 8000ebc:	48001400 	.word	0x48001400
 8000ec0:	48001800 	.word	0x48001800
 8000ec4:	48001c00 	.word	0x48001c00
 8000ec8:	40010400 	.word	0x40010400

08000ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000edc:	787b      	ldrb	r3, [r7, #1]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee2:	887a      	ldrh	r2, [r7, #2]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40007000 	.word	0x40007000

08000f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f26:	d130      	bne.n	8000f8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f28:	4b23      	ldr	r3, [pc, #140]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f34:	d038      	beq.n	8000fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2232      	movs	r2, #50	@ 0x32
 8000f4c:	fb02 f303 	mul.w	r3, r2, r3
 8000f50:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0c9b      	lsrs	r3, r3, #18
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f5c:	e002      	b.n	8000f64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f70:	d102      	bne.n	8000f78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f2      	bne.n	8000f5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f84:	d110      	bne.n	8000fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e00f      	b.n	8000faa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f96:	d007      	beq.n	8000fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f98:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fa0:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40007000 	.word	0x40007000
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	431bde83 	.word	0x431bde83

08000fc4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fd2:	6053      	str	r3, [r2, #4]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40007000 	.word	0x40007000

08000fe4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f000 bc08 	b.w	8001808 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ff8:	4b96      	ldr	r3, [pc, #600]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 030c 	and.w	r3, r3, #12
 8001000:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001002:	4b94      	ldr	r3, [pc, #592]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80e4 	beq.w	80011e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <HAL_RCC_OscConfig+0x4c>
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2b0c      	cmp	r3, #12
 8001024:	f040 808b 	bne.w	800113e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	2b01      	cmp	r3, #1
 800102c:	f040 8087 	bne.w	800113e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001030:	4b88      	ldr	r3, [pc, #544]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <HAL_RCC_OscConfig+0x64>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e3df      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1a      	ldr	r2, [r3, #32]
 800104c:	4b81      	ldr	r3, [pc, #516]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <HAL_RCC_OscConfig+0x7e>
 8001058:	4b7e      	ldr	r3, [pc, #504]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001060:	e005      	b.n	800106e <HAL_RCC_OscConfig+0x8a>
 8001062:	4b7c      	ldr	r3, [pc, #496]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800106e:	4293      	cmp	r3, r2
 8001070:	d223      	bcs.n	80010ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fd92 	bl	8001ba0 <RCC_SetFlashLatencyFromMSIRange>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e3c0      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001086:	4b73      	ldr	r3, [pc, #460]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a72      	ldr	r2, [pc, #456]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b70      	ldr	r3, [pc, #448]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	496d      	ldr	r1, [pc, #436]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	4968      	ldr	r1, [pc, #416]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]
 80010b8:	e025      	b.n	8001106 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010ba:	4b66      	ldr	r3, [pc, #408]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a65      	ldr	r2, [pc, #404]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b63      	ldr	r3, [pc, #396]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4960      	ldr	r1, [pc, #384]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	495b      	ldr	r1, [pc, #364]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d109      	bne.n	8001106 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fd52 	bl	8001ba0 <RCC_SetFlashLatencyFromMSIRange>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e380      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001106:	f000 fc87 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 800110a:	4602      	mov	r2, r0
 800110c:	4b51      	ldr	r3, [pc, #324]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	4950      	ldr	r1, [pc, #320]	@ (8001258 <HAL_RCC_OscConfig+0x274>)
 8001118:	5ccb      	ldrb	r3, [r1, r3]
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	fa22 f303 	lsr.w	r3, r2, r3
 8001122:	4a4e      	ldr	r2, [pc, #312]	@ (800125c <HAL_RCC_OscConfig+0x278>)
 8001124:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001126:	4b4e      	ldr	r3, [pc, #312]	@ (8001260 <HAL_RCC_OscConfig+0x27c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fbfa 	bl	8000924 <HAL_InitTick>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d052      	beq.n	80011e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	e364      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d032      	beq.n	80011ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001146:	4b43      	ldr	r3, [pc, #268]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a42      	ldr	r2, [pc, #264]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001152:	f7ff fc37 	bl	80009c4 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800115a:	f7ff fc33 	bl	80009c4 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e34d      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800116c:	4b39      	ldr	r3, [pc, #228]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001178:	4b36      	ldr	r3, [pc, #216]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a35      	ldr	r2, [pc, #212]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b33      	ldr	r3, [pc, #204]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4930      	ldr	r1, [pc, #192]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001196:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	492b      	ldr	r1, [pc, #172]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	604b      	str	r3, [r1, #4]
 80011aa:	e01a      	b.n	80011e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011ac:	4b29      	ldr	r3, [pc, #164]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a28      	ldr	r2, [pc, #160]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80011b2:	f023 0301 	bic.w	r3, r3, #1
 80011b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fc04 	bl	80009c4 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011c0:	f7ff fc00 	bl	80009c4 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e31a      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011d2:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0x1dc>
 80011de:	e000      	b.n	80011e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d073      	beq.n	80012d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_OscConfig+0x21c>
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	2b0c      	cmp	r3, #12
 80011f8:	d10e      	bne.n	8001218 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d10b      	bne.n	8001218 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d063      	beq.n	80012d4 <HAL_RCC_OscConfig+0x2f0>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d15f      	bne.n	80012d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e2f7      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001220:	d106      	bne.n	8001230 <HAL_RCC_OscConfig+0x24c>
 8001222:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a0b      	ldr	r2, [pc, #44]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e025      	b.n	800127c <HAL_RCC_OscConfig+0x298>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001238:	d114      	bne.n	8001264 <HAL_RCC_OscConfig+0x280>
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a05      	ldr	r2, [pc, #20]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a02      	ldr	r2, [pc, #8]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e013      	b.n	800127c <HAL_RCC_OscConfig+0x298>
 8001254:	40021000 	.word	0x40021000
 8001258:	08003764 	.word	0x08003764
 800125c:	20000000 	.word	0x20000000
 8001260:	20000004 	.word	0x20000004
 8001264:	4ba0      	ldr	r3, [pc, #640]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a9f      	ldr	r2, [pc, #636]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 800126a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b9d      	ldr	r3, [pc, #628]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a9c      	ldr	r2, [pc, #624]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800127a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fb9e 	bl	80009c4 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fb9a 	bl	80009c4 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	@ 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e2b4      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129e:	4b92      	ldr	r3, [pc, #584]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0x2a8>
 80012aa:	e014      	b.n	80012d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fb8a 	bl	80009c4 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fb86 	bl	80009c4 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	@ 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e2a0      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c6:	4b88      	ldr	r3, [pc, #544]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x2d0>
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d060      	beq.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_OscConfig+0x310>
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b0c      	cmp	r3, #12
 80012ec:	d119      	bne.n	8001322 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d116      	bne.n	8001322 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f4:	4b7c      	ldr	r3, [pc, #496]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_OscConfig+0x328>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e27d      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b76      	ldr	r3, [pc, #472]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	061b      	lsls	r3, r3, #24
 800131a:	4973      	ldr	r1, [pc, #460]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001320:	e040      	b.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d023      	beq.n	8001372 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800132a:	4b6f      	ldr	r3, [pc, #444]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a6e      	ldr	r2, [pc, #440]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001336:	f7ff fb45 	bl	80009c4 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fb41 	bl	80009c4 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e25b      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001350:	4b65      	ldr	r3, [pc, #404]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b62      	ldr	r3, [pc, #392]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	061b      	lsls	r3, r3, #24
 800136a:	495f      	ldr	r1, [pc, #380]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
 8001370:	e018      	b.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001372:	4b5d      	ldr	r3, [pc, #372]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a5c      	ldr	r2, [pc, #368]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800137c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fb21 	bl	80009c4 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fb1d 	bl	80009c4 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e237      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001398:	4b53      	ldr	r3, [pc, #332]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d03c      	beq.n	800142a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d01c      	beq.n	80013f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b8:	4b4b      	ldr	r3, [pc, #300]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80013ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013be:	4a4a      	ldr	r2, [pc, #296]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fafc 	bl	80009c4 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff faf8 	bl	80009c4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e212      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013e2:	4b41      	ldr	r3, [pc, #260]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80013e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ef      	beq.n	80013d0 <HAL_RCC_OscConfig+0x3ec>
 80013f0:	e01b      	b.n	800142a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f2:	4b3d      	ldr	r3, [pc, #244]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80013f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013f8:	4a3b      	ldr	r2, [pc, #236]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001402:	f7ff fadf 	bl	80009c4 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fadb 	bl	80009c4 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e1f5      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800141c:	4b32      	ldr	r3, [pc, #200]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 800141e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1ef      	bne.n	800140a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80a6 	beq.w	8001584 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800143c:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 800143e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10d      	bne.n	8001464 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001448:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 800144a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144c:	4a26      	ldr	r2, [pc, #152]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 800144e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001452:	6593      	str	r3, [r2, #88]	@ 0x58
 8001454:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001460:	2301      	movs	r3, #1
 8001462:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001464:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <HAL_RCC_OscConfig+0x508>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d118      	bne.n	80014a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001470:	4b1e      	ldr	r3, [pc, #120]	@ (80014ec <HAL_RCC_OscConfig+0x508>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1d      	ldr	r2, [pc, #116]	@ (80014ec <HAL_RCC_OscConfig+0x508>)
 8001476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800147a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147c:	f7ff faa2 	bl	80009c4 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001484:	f7ff fa9e 	bl	80009c4 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1b8      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <HAL_RCC_OscConfig+0x508>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d108      	bne.n	80014bc <HAL_RCC_OscConfig+0x4d8>
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80014ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014b0:	4a0d      	ldr	r2, [pc, #52]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014ba:	e029      	b.n	8001510 <HAL_RCC_OscConfig+0x52c>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d115      	bne.n	80014f0 <HAL_RCC_OscConfig+0x50c>
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80014c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ca:	4a07      	ldr	r2, [pc, #28]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80014d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014da:	4a03      	ldr	r2, [pc, #12]	@ (80014e8 <HAL_RCC_OscConfig+0x504>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014e4:	e014      	b.n	8001510 <HAL_RCC_OscConfig+0x52c>
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40007000 	.word	0x40007000
 80014f0:	4b9d      	ldr	r3, [pc, #628]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 80014f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f6:	4a9c      	ldr	r2, [pc, #624]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001500:	4b99      	ldr	r3, [pc, #612]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 8001502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001506:	4a98      	ldr	r2, [pc, #608]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 8001508:	f023 0304 	bic.w	r3, r3, #4
 800150c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d016      	beq.n	8001546 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001518:	f7ff fa54 	bl	80009c4 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800151e:	e00a      	b.n	8001536 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001520:	f7ff fa50 	bl	80009c4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e168      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001536:	4b8c      	ldr	r3, [pc, #560]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 8001538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0ed      	beq.n	8001520 <HAL_RCC_OscConfig+0x53c>
 8001544:	e015      	b.n	8001572 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001546:	f7ff fa3d 	bl	80009c4 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fa39 	bl	80009c4 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e151      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001564:	4b80      	ldr	r3, [pc, #512]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 8001566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ed      	bne.n	800154e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001572:	7ffb      	ldrb	r3, [r7, #31]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001578:	4b7b      	ldr	r3, [pc, #492]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	4a7a      	ldr	r2, [pc, #488]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 800157e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001582:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0320 	and.w	r3, r3, #32
 800158c:	2b00      	cmp	r3, #0
 800158e:	d03c      	beq.n	800160a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01c      	beq.n	80015d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001598:	4b73      	ldr	r3, [pc, #460]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 800159a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800159e:	4a72      	ldr	r2, [pc, #456]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fa0c 	bl	80009c4 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015b0:	f7ff fa08 	bl	80009c4 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e122      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015c2:	4b69      	ldr	r3, [pc, #420]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 80015c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0ef      	beq.n	80015b0 <HAL_RCC_OscConfig+0x5cc>
 80015d0:	e01b      	b.n	800160a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015d2:	4b65      	ldr	r3, [pc, #404]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 80015d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015d8:	4a63      	ldr	r2, [pc, #396]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e2:	f7ff f9ef 	bl	80009c4 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015ea:	f7ff f9eb 	bl	80009c4 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e105      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 80015fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ef      	bne.n	80015ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80f9 	beq.w	8001806 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001618:	2b02      	cmp	r3, #2
 800161a:	f040 80cf 	bne.w	80017bc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800161e:	4b52      	ldr	r3, [pc, #328]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f003 0203 	and.w	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162e:	429a      	cmp	r2, r3
 8001630:	d12c      	bne.n	800168c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163c:	3b01      	subs	r3, #1
 800163e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d123      	bne.n	800168c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800164e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001650:	429a      	cmp	r2, r3
 8001652:	d11b      	bne.n	800168c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800165e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001660:	429a      	cmp	r2, r3
 8001662:	d113      	bne.n	800168c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	3b01      	subs	r3, #1
 8001672:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d109      	bne.n	800168c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	085b      	lsrs	r3, r3, #1
 8001684:	3b01      	subs	r3, #1
 8001686:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d071      	beq.n	8001770 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d068      	beq.n	8001764 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001692:	4b35      	ldr	r3, [pc, #212]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d105      	bne.n	80016aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800169e:	4b32      	ldr	r3, [pc, #200]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0ac      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 80016b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016ba:	f7ff f983 	bl	80009c4 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c2:	f7ff f97f 	bl	80009c4 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e099      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d4:	4b24      	ldr	r3, [pc, #144]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e0:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	4b21      	ldr	r3, [pc, #132]	@ (800176c <HAL_RCC_OscConfig+0x788>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016f0:	3a01      	subs	r2, #1
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	4311      	orrs	r1, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016fa:	0212      	lsls	r2, r2, #8
 80016fc:	4311      	orrs	r1, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001702:	0852      	lsrs	r2, r2, #1
 8001704:	3a01      	subs	r2, #1
 8001706:	0552      	lsls	r2, r2, #21
 8001708:	4311      	orrs	r1, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800170e:	0852      	lsrs	r2, r2, #1
 8001710:	3a01      	subs	r2, #1
 8001712:	0652      	lsls	r2, r2, #25
 8001714:	4311      	orrs	r1, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800171a:	06d2      	lsls	r2, r2, #27
 800171c:	430a      	orrs	r2, r1
 800171e:	4912      	ldr	r1, [pc, #72]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 8001720:	4313      	orrs	r3, r2
 8001722:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001724:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0f      	ldr	r2, [pc, #60]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 800172a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800172e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001730:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4a0c      	ldr	r2, [pc, #48]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 8001736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800173a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800173c:	f7ff f942 	bl	80009c4 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff f93e 	bl	80009c4 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e058      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001756:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <HAL_RCC_OscConfig+0x784>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001762:	e050      	b.n	8001806 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e04f      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
 8001768:	40021000 	.word	0x40021000
 800176c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001770:	4b27      	ldr	r3, [pc, #156]	@ (8001810 <HAL_RCC_OscConfig+0x82c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d144      	bne.n	8001806 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800177c:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <HAL_RCC_OscConfig+0x82c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a23      	ldr	r2, [pc, #140]	@ (8001810 <HAL_RCC_OscConfig+0x82c>)
 8001782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001786:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001788:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <HAL_RCC_OscConfig+0x82c>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4a20      	ldr	r2, [pc, #128]	@ (8001810 <HAL_RCC_OscConfig+0x82c>)
 800178e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001792:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001794:	f7ff f916 	bl	80009c4 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff f912 	bl	80009c4 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e02c      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ae:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <HAL_RCC_OscConfig+0x82c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x7b8>
 80017ba:	e024      	b.n	8001806 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2b0c      	cmp	r3, #12
 80017c0:	d01f      	beq.n	8001802 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <HAL_RCC_OscConfig+0x82c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <HAL_RCC_OscConfig+0x82c>)
 80017c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff f8f9 	bl	80009c4 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff f8f5 	bl	80009c4 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e00f      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e8:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <HAL_RCC_OscConfig+0x82c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_RCC_OscConfig+0x82c>)
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	4905      	ldr	r1, [pc, #20]	@ (8001810 <HAL_RCC_OscConfig+0x82c>)
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_RCC_OscConfig+0x830>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	60cb      	str	r3, [r1, #12]
 8001800:	e001      	b.n	8001806 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	feeefffc 	.word	0xfeeefffc

08001818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0e7      	b.n	80019fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800182c:	4b75      	ldr	r3, [pc, #468]	@ (8001a04 <HAL_RCC_ClockConfig+0x1ec>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d910      	bls.n	800185c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b72      	ldr	r3, [pc, #456]	@ (8001a04 <HAL_RCC_ClockConfig+0x1ec>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 0207 	bic.w	r2, r3, #7
 8001842:	4970      	ldr	r1, [pc, #448]	@ (8001a04 <HAL_RCC_ClockConfig+0x1ec>)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b6e      	ldr	r3, [pc, #440]	@ (8001a04 <HAL_RCC_ClockConfig+0x1ec>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0cf      	b.n	80019fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d010      	beq.n	800188a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	4b66      	ldr	r3, [pc, #408]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001874:	429a      	cmp	r2, r3
 8001876:	d908      	bls.n	800188a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b63      	ldr	r3, [pc, #396]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4960      	ldr	r1, [pc, #384]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d04c      	beq.n	8001930 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d121      	bne.n	80018ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0a6      	b.n	80019fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b6:	4b54      	ldr	r3, [pc, #336]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d115      	bne.n	80018ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e09a      	b.n	80019fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d109      	bne.n	80018ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e08e      	b.n	80019fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018de:	4b4a      	ldr	r3, [pc, #296]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e086      	b.n	80019fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ee:	4b46      	ldr	r3, [pc, #280]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f023 0203 	bic.w	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4943      	ldr	r1, [pc, #268]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001900:	f7ff f860 	bl	80009c4 <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	e00a      	b.n	800191e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001908:	f7ff f85c 	bl	80009c4 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e06e      	b.n	80019fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 020c 	and.w	r2, r3, #12
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	429a      	cmp	r2, r3
 800192e:	d1eb      	bne.n	8001908 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d010      	beq.n	800195e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001948:	429a      	cmp	r2, r3
 800194a:	d208      	bcs.n	800195e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	492b      	ldr	r1, [pc, #172]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800195e:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <HAL_RCC_ClockConfig+0x1ec>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d210      	bcs.n	800198e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196c:	4b25      	ldr	r3, [pc, #148]	@ (8001a04 <HAL_RCC_ClockConfig+0x1ec>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 0207 	bic.w	r2, r3, #7
 8001974:	4923      	ldr	r1, [pc, #140]	@ (8001a04 <HAL_RCC_ClockConfig+0x1ec>)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197c:	4b21      	ldr	r3, [pc, #132]	@ (8001a04 <HAL_RCC_ClockConfig+0x1ec>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d001      	beq.n	800198e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e036      	b.n	80019fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d008      	beq.n	80019ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4918      	ldr	r1, [pc, #96]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d009      	beq.n	80019cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b8:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4910      	ldr	r1, [pc, #64]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019cc:	f000 f824 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	490b      	ldr	r1, [pc, #44]	@ (8001a0c <HAL_RCC_ClockConfig+0x1f4>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	4a09      	ldr	r2, [pc, #36]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 80019ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_RCC_ClockConfig+0x1fc>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe ff97 	bl	8000924 <HAL_InitTick>
 80019f6:	4603      	mov	r3, r0
 80019f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80019fa:	7afb      	ldrb	r3, [r7, #11]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40022000 	.word	0x40022000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08003764 	.word	0x08003764
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	@ 0x24
 8001a1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a26:	4b3e      	ldr	r3, [pc, #248]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a30:	4b3b      	ldr	r3, [pc, #236]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x34>
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d121      	bne.n	8001a8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d11e      	bne.n	8001a8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a4c:	4b34      	ldr	r3, [pc, #208]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a58:	4b31      	ldr	r3, [pc, #196]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	e005      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a68:	4b2d      	ldr	r3, [pc, #180]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a74:	4a2b      	ldr	r2, [pc, #172]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10d      	bne.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d102      	bne.n	8001a96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a90:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	e004      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a9c:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001a9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d134      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d003      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0xa6>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d003      	beq.n	8001ac4 <HAL_RCC_GetSysClockFreq+0xac>
 8001abc:	e005      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ac0:	617b      	str	r3, [r7, #20]
      break;
 8001ac2:	e005      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ac6:	617b      	str	r3, [r7, #20]
      break;
 8001ac8:	e002      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	617b      	str	r3, [r7, #20]
      break;
 8001ace:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ad0:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	3301      	adds	r3, #1
 8001adc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	fb03 f202 	mul.w	r2, r3, r2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	0e5b      	lsrs	r3, r3, #25
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	3301      	adds	r3, #1
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b10:	69bb      	ldr	r3, [r7, #24]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	@ 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	0800377c 	.word	0x0800377c
 8001b28:	00f42400 	.word	0x00f42400
 8001b2c:	007a1200 	.word	0x007a1200

08001b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000

08001b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4904      	ldr	r1, [pc, #16]	@ (8001b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08003774 	.word	0x08003774

08001b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b78:	f7ff ffda 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0adb      	lsrs	r3, r3, #11
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4904      	ldr	r1, [pc, #16]	@ (8001b9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	08003774 	.word	0x08003774

08001ba0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bac:	4b2a      	ldr	r3, [pc, #168]	@ (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bb8:	f7ff f9a0 	bl	8000efc <HAL_PWREx_GetVoltageRange>
 8001bbc:	6178      	str	r0, [r7, #20]
 8001bbe:	e014      	b.n	8001bea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bc0:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	4a24      	ldr	r2, [pc, #144]	@ (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bcc:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bd8:	f7ff f990 	bl	8000efc <HAL_PWREx_GetVoltageRange>
 8001bdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bde:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bf0:	d10b      	bne.n	8001c0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b80      	cmp	r3, #128	@ 0x80
 8001bf6:	d919      	bls.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2ba0      	cmp	r3, #160	@ 0xa0
 8001bfc:	d902      	bls.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bfe:	2302      	movs	r3, #2
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	e013      	b.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c04:	2301      	movs	r3, #1
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	e010      	b.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b80      	cmp	r3, #128	@ 0x80
 8001c0e:	d902      	bls.n	8001c16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c10:	2303      	movs	r3, #3
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	e00a      	b.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b80      	cmp	r3, #128	@ 0x80
 8001c1a:	d102      	bne.n	8001c22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e004      	b.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b70      	cmp	r3, #112	@ 0x70
 8001c26:	d101      	bne.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c28:	2301      	movs	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 0207 	bic.w	r2, r3, #7
 8001c34:	4909      	ldr	r1, [pc, #36]	@ (8001c5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c3c:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d001      	beq.n	8001c4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40022000 	.word	0x40022000

08001c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c68:	2300      	movs	r3, #0
 8001c6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d041      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c80:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c84:	d02a      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c86:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001c8a:	d824      	bhi.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c90:	d008      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c96:	d81e      	bhi.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00a      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ca0:	d010      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ca2:	e018      	b.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ca4:	4b86      	ldr	r3, [pc, #536]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4a85      	ldr	r2, [pc, #532]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cb0:	e015      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 facd 	bl	8002258 <RCCEx_PLLSAI1_Config>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cc2:	e00c      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3320      	adds	r3, #32
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fbb6 	bl	800243c <RCCEx_PLLSAI2_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cd4:	e003      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	74fb      	strb	r3, [r7, #19]
      break;
 8001cda:	e000      	b.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cde:	7cfb      	ldrb	r3, [r7, #19]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10b      	bne.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ce4:	4b76      	ldr	r3, [pc, #472]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cf2:	4973      	ldr	r1, [pc, #460]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001cfa:	e001      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cfc:	7cfb      	ldrb	r3, [r7, #19]
 8001cfe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d041      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d14:	d02a      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d1a:	d824      	bhi.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d20:	d008      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d26:	d81e      	bhi.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00a      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d30:	d010      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d32:	e018      	b.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d34:	4b62      	ldr	r3, [pc, #392]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4a61      	ldr	r2, [pc, #388]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d40:	e015      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fa85 	bl	8002258 <RCCEx_PLLSAI1_Config>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d52:	e00c      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3320      	adds	r3, #32
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fb6e 	bl	800243c <RCCEx_PLLSAI2_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d64:	e003      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	74fb      	strb	r3, [r7, #19]
      break;
 8001d6a:	e000      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d6e:	7cfb      	ldrb	r3, [r7, #19]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10b      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d74:	4b52      	ldr	r3, [pc, #328]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d82:	494f      	ldr	r1, [pc, #316]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001d8a:	e001      	b.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d8c:	7cfb      	ldrb	r3, [r7, #19]
 8001d8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a0 	beq.w	8001ede <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001da2:	4b47      	ldr	r3, [pc, #284]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001db2:	2300      	movs	r3, #0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00d      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db8:	4b41      	ldr	r3, [pc, #260]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbc:	4a40      	ldr	r2, [pc, #256]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001de0:	f7fe fdf0 	bl	80009c4 <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001de6:	e009      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de8:	f7fe fdec 	bl	80009c4 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d902      	bls.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	74fb      	strb	r3, [r7, #19]
        break;
 8001dfa:	e005      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001dfc:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0ef      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e08:	7cfb      	ldrb	r3, [r7, #19]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d15c      	bne.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01f      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d019      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e38:	4b21      	ldr	r3, [pc, #132]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3e:	4a20      	ldr	r2, [pc, #128]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e58:	4a19      	ldr	r2, [pc, #100]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d016      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7fe fdab 	bl	80009c4 <HAL_GetTick>
 8001e6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e70:	e00b      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7fe fda7 	bl	80009c4 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d902      	bls.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	74fb      	strb	r3, [r7, #19]
            break;
 8001e88:	e006      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ec      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eae:	4904      	ldr	r1, [pc, #16]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001eb6:	e009      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	74bb      	strb	r3, [r7, #18]
 8001ebc:	e006      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec8:	7cfb      	ldrb	r3, [r7, #19]
 8001eca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ecc:	7c7b      	ldrb	r3, [r7, #17]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4ba6      	ldr	r3, [pc, #664]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed6:	4aa5      	ldr	r2, [pc, #660]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eea:	4ba0      	ldr	r3, [pc, #640]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef0:	f023 0203 	bic.w	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef8:	499c      	ldr	r1, [pc, #624]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f0c:	4b97      	ldr	r3, [pc, #604]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f12:	f023 020c 	bic.w	r2, r3, #12
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f1a:	4994      	ldr	r1, [pc, #592]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f2e:	4b8f      	ldr	r3, [pc, #572]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	498b      	ldr	r1, [pc, #556]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f50:	4b86      	ldr	r3, [pc, #536]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	4983      	ldr	r1, [pc, #524]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f72:	4b7e      	ldr	r3, [pc, #504]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f80:	497a      	ldr	r1, [pc, #488]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f94:	4b75      	ldr	r3, [pc, #468]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa2:	4972      	ldr	r1, [pc, #456]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fbc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc4:	4969      	ldr	r1, [pc, #420]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fd8:	4b64      	ldr	r3, [pc, #400]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fe6:	4961      	ldr	r1, [pc, #388]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002000:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002008:	4958      	ldr	r1, [pc, #352]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800201c:	4b53      	ldr	r3, [pc, #332]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002022:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202a:	4950      	ldr	r1, [pc, #320]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800203e:	4b4b      	ldr	r3, [pc, #300]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002044:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204c:	4947      	ldr	r1, [pc, #284]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002060:	4b42      	ldr	r3, [pc, #264]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002062:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002066:	f023 0203 	bic.w	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	493f      	ldr	r1, [pc, #252]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d028      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002082:	4b3a      	ldr	r3, [pc, #232]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002088:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002090:	4936      	ldr	r1, [pc, #216]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020a0:	d106      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a2:	4b32      	ldr	r3, [pc, #200]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4a31      	ldr	r2, [pc, #196]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ac:	60d3      	str	r3, [r2, #12]
 80020ae:	e011      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	2101      	movs	r1, #1
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f8c9 	bl	8002258 <RCCEx_PLLSAI1_Config>
 80020c6:	4603      	mov	r3, r0
 80020c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020ca:	7cfb      	ldrb	r3, [r7, #19]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d028      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ee:	491f      	ldr	r1, [pc, #124]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020fe:	d106      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002100:	4b1a      	ldr	r3, [pc, #104]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a19      	ldr	r2, [pc, #100]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800210a:	60d3      	str	r3, [r2, #12]
 800210c:	e011      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002112:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002116:	d10c      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3304      	adds	r3, #4
 800211c:	2101      	movs	r1, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f89a 	bl	8002258 <RCCEx_PLLSAI1_Config>
 8002124:	4603      	mov	r3, r0
 8002126:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002128:	7cfb      	ldrb	r3, [r7, #19]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800212e:	7cfb      	ldrb	r3, [r7, #19]
 8002130:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d02a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800213e:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002144:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800214c:	4907      	ldr	r1, [pc, #28]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800215c:	d108      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215e:	4b03      	ldr	r3, [pc, #12]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	4a02      	ldr	r2, [pc, #8]	@ (800216c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002164:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002168:	60d3      	str	r3, [r2, #12]
 800216a:	e013      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800216c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002174:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002178:	d10c      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	2101      	movs	r1, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f869 	bl	8002258 <RCCEx_PLLSAI1_Config>
 8002186:	4603      	mov	r3, r0
 8002188:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d02f      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021ae:	4929      	ldr	r1, [pc, #164]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021be:	d10d      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	2102      	movs	r1, #2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f846 	bl	8002258 <RCCEx_PLLSAI1_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d014      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	74bb      	strb	r3, [r7, #18]
 80021da:	e011      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3320      	adds	r3, #32
 80021ea:	2102      	movs	r1, #2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f925 	bl	800243c <RCCEx_PLLSAI2_Config>
 80021f2:	4603      	mov	r3, r0
 80021f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00b      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800220c:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800221c:	490d      	ldr	r1, [pc, #52]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00b      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002236:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002240:	4904      	ldr	r1, [pc, #16]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002248:	7cbb      	ldrb	r3, [r7, #18]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000

08002258 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002266:	4b74      	ldr	r3, [pc, #464]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d018      	beq.n	80022a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002272:	4b71      	ldr	r3, [pc, #452]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 0203 	and.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d10d      	bne.n	800229e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
       ||
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800228a:	4b6b      	ldr	r3, [pc, #428]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
       ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d047      	beq.n	800232e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
 80022a2:	e044      	b.n	800232e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d018      	beq.n	80022de <RCCEx_PLLSAI1_Config+0x86>
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d825      	bhi.n	80022fc <RCCEx_PLLSAI1_Config+0xa4>
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d002      	beq.n	80022ba <RCCEx_PLLSAI1_Config+0x62>
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d009      	beq.n	80022cc <RCCEx_PLLSAI1_Config+0x74>
 80022b8:	e020      	b.n	80022fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d11d      	bne.n	8002302 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ca:	e01a      	b.n	8002302 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d116      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022dc:	e013      	b.n	8002306 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022de:	4b56      	ldr	r3, [pc, #344]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10f      	bne.n	800230a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022ea:	4b53      	ldr	r3, [pc, #332]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022fa:	e006      	b.n	800230a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002300:	e004      	b.n	800230c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002302:	bf00      	nop
 8002304:	e002      	b.n	800230c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002306:	bf00      	nop
 8002308:	e000      	b.n	800230c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800230a:	bf00      	nop
    }

    if(status == HAL_OK)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10d      	bne.n	800232e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002312:	4b49      	ldr	r3, [pc, #292]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6819      	ldr	r1, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	430b      	orrs	r3, r1
 8002328:	4943      	ldr	r1, [pc, #268]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800232a:	4313      	orrs	r3, r2
 800232c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d17c      	bne.n	800242e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002334:	4b40      	ldr	r3, [pc, #256]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a3f      	ldr	r2, [pc, #252]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800233a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800233e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002340:	f7fe fb40 	bl	80009c4 <HAL_GetTick>
 8002344:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002346:	e009      	b.n	800235c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002348:	f7fe fb3c 	bl	80009c4 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d902      	bls.n	800235c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	73fb      	strb	r3, [r7, #15]
        break;
 800235a:	e005      	b.n	8002368 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800235c:	4b36      	ldr	r3, [pc, #216]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ef      	bne.n	8002348 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d15f      	bne.n	800242e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d110      	bne.n	8002396 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002374:	4b30      	ldr	r3, [pc, #192]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800237c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6892      	ldr	r2, [r2, #8]
 8002384:	0211      	lsls	r1, r2, #8
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68d2      	ldr	r2, [r2, #12]
 800238a:	06d2      	lsls	r2, r2, #27
 800238c:	430a      	orrs	r2, r1
 800238e:	492a      	ldr	r1, [pc, #168]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002390:	4313      	orrs	r3, r2
 8002392:	610b      	str	r3, [r1, #16]
 8002394:	e027      	b.n	80023e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d112      	bne.n	80023c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800239c:	4b26      	ldr	r3, [pc, #152]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80023a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6892      	ldr	r2, [r2, #8]
 80023ac:	0211      	lsls	r1, r2, #8
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6912      	ldr	r2, [r2, #16]
 80023b2:	0852      	lsrs	r2, r2, #1
 80023b4:	3a01      	subs	r2, #1
 80023b6:	0552      	lsls	r2, r2, #21
 80023b8:	430a      	orrs	r2, r1
 80023ba:	491f      	ldr	r1, [pc, #124]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	610b      	str	r3, [r1, #16]
 80023c0:	e011      	b.n	80023e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80023ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6892      	ldr	r2, [r2, #8]
 80023d2:	0211      	lsls	r1, r2, #8
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6952      	ldr	r2, [r2, #20]
 80023d8:	0852      	lsrs	r2, r2, #1
 80023da:	3a01      	subs	r2, #1
 80023dc:	0652      	lsls	r2, r2, #25
 80023de:	430a      	orrs	r2, r1
 80023e0:	4915      	ldr	r1, [pc, #84]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023e6:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a13      	ldr	r2, [pc, #76]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f2:	f7fe fae7 	bl	80009c4 <HAL_GetTick>
 80023f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023f8:	e009      	b.n	800240e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023fa:	f7fe fae3 	bl	80009c4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d902      	bls.n	800240e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	73fb      	strb	r3, [r7, #15]
          break;
 800240c:	e005      	b.n	800241a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800240e:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0ef      	beq.n	80023fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d106      	bne.n	800242e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4903      	ldr	r1, [pc, #12]	@ (8002438 <RCCEx_PLLSAI1_Config+0x1e0>)
 800242a:	4313      	orrs	r3, r2
 800242c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000

0800243c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800244a:	4b69      	ldr	r3, [pc, #420]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d018      	beq.n	8002488 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002456:	4b66      	ldr	r3, [pc, #408]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0203 	and.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d10d      	bne.n	8002482 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
       ||
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800246e:	4b60      	ldr	r3, [pc, #384]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
       ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d047      	beq.n	8002512 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	e044      	b.n	8002512 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d018      	beq.n	80024c2 <RCCEx_PLLSAI2_Config+0x86>
 8002490:	2b03      	cmp	r3, #3
 8002492:	d825      	bhi.n	80024e0 <RCCEx_PLLSAI2_Config+0xa4>
 8002494:	2b01      	cmp	r3, #1
 8002496:	d002      	beq.n	800249e <RCCEx_PLLSAI2_Config+0x62>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d009      	beq.n	80024b0 <RCCEx_PLLSAI2_Config+0x74>
 800249c:	e020      	b.n	80024e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800249e:	4b54      	ldr	r3, [pc, #336]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11d      	bne.n	80024e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ae:	e01a      	b.n	80024e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024b0:	4b4f      	ldr	r3, [pc, #316]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d116      	bne.n	80024ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c0:	e013      	b.n	80024ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024c2:	4b4b      	ldr	r3, [pc, #300]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10f      	bne.n	80024ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024ce:	4b48      	ldr	r3, [pc, #288]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024de:	e006      	b.n	80024ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e004      	b.n	80024f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024e6:	bf00      	nop
 80024e8:	e002      	b.n	80024f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ea:	bf00      	nop
 80024ec:	e000      	b.n	80024f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80024ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024f6:	4b3e      	ldr	r3, [pc, #248]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	430b      	orrs	r3, r1
 800250c:	4938      	ldr	r1, [pc, #224]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d166      	bne.n	80025e6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002518:	4b35      	ldr	r3, [pc, #212]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a34      	ldr	r2, [pc, #208]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800251e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002524:	f7fe fa4e 	bl	80009c4 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800252a:	e009      	b.n	8002540 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800252c:	f7fe fa4a 	bl	80009c4 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d902      	bls.n	8002540 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	73fb      	strb	r3, [r7, #15]
        break;
 800253e:	e005      	b.n	800254c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002540:	4b2b      	ldr	r3, [pc, #172]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ef      	bne.n	800252c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d149      	bne.n	80025e6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d110      	bne.n	800257a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002558:	4b25      	ldr	r3, [pc, #148]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002560:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6892      	ldr	r2, [r2, #8]
 8002568:	0211      	lsls	r1, r2, #8
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68d2      	ldr	r2, [r2, #12]
 800256e:	06d2      	lsls	r2, r2, #27
 8002570:	430a      	orrs	r2, r1
 8002572:	491f      	ldr	r1, [pc, #124]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	614b      	str	r3, [r1, #20]
 8002578:	e011      	b.n	800259e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800257a:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002582:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6892      	ldr	r2, [r2, #8]
 800258a:	0211      	lsls	r1, r2, #8
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6912      	ldr	r2, [r2, #16]
 8002590:	0852      	lsrs	r2, r2, #1
 8002592:	3a01      	subs	r2, #1
 8002594:	0652      	lsls	r2, r2, #25
 8002596:	430a      	orrs	r2, r1
 8002598:	4915      	ldr	r1, [pc, #84]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800259e:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a13      	ldr	r2, [pc, #76]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7fe fa0b 	bl	80009c4 <HAL_GetTick>
 80025ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025b0:	e009      	b.n	80025c6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025b2:	f7fe fa07 	bl	80009c4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d902      	bls.n	80025c6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	73fb      	strb	r3, [r7, #15]
          break;
 80025c4:	e005      	b.n	80025d2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025c6:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0ef      	beq.n	80025b2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d106      	bne.n	80025e6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	4903      	ldr	r1, [pc, #12]	@ (80025f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000

080025f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e040      	b.n	8002688 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe f8a0 	bl	800075c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	@ 0x24
 8002620:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fbc2 	bl	8002dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f907 	bl	8002854 <UART_SetConfig>
 8002646:	4603      	mov	r3, r0
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e01b      	b.n	8002688 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800265e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800266e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fc41 	bl	8002f08 <UART_CheckIdleState>
 8002686:	4603      	mov	r3, r0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d177      	bne.n	8002798 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_UART_Transmit+0x24>
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e070      	b.n	800279a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2221      	movs	r2, #33	@ 0x21
 80026c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026c6:	f7fe f97d 	bl	80009c4 <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	88fa      	ldrh	r2, [r7, #6]
 80026d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	88fa      	ldrh	r2, [r7, #6]
 80026d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e4:	d108      	bne.n	80026f8 <HAL_UART_Transmit+0x68>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d104      	bne.n	80026f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	e003      	b.n	8002700 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002700:	e02f      	b.n	8002762 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2200      	movs	r2, #0
 800270a:	2180      	movs	r1, #128	@ 0x80
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fca3 	bl	8003058 <UART_WaitOnFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e03b      	b.n	800279a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	881a      	ldrh	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002734:	b292      	uxth	r2, r2
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	3302      	adds	r3, #2
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	e007      	b.n	8002750 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3301      	adds	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1c9      	bne.n	8002702 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2200      	movs	r2, #0
 8002776:	2140      	movs	r1, #64	@ 0x40
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fc6d 	bl	8003058 <UART_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e005      	b.n	800279a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e000      	b.n	800279a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d137      	bne.n	800282c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_UART_Receive_IT+0x24>
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e030      	b.n	800282e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a18      	ldr	r2, [pc, #96]	@ (8002838 <HAL_UART_Receive_IT+0x94>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d01f      	beq.n	800281c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d018      	beq.n	800281c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	e853 3f00 	ldrex	r3, [r3]
 80027f6:	613b      	str	r3, [r7, #16]
   return(result);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280c:	69f9      	ldr	r1, [r7, #28]
 800280e:	6a3a      	ldr	r2, [r7, #32]
 8002810:	e841 2300 	strex	r3, r2, [r1]
 8002814:	61bb      	str	r3, [r7, #24]
   return(result);
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e6      	bne.n	80027ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	461a      	mov	r2, r3
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fc80 	bl	8003128 <UART_Start_Receive_IT>
 8002828:	4603      	mov	r3, r0
 800282a:	e000      	b.n	800282e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800282c:	2302      	movs	r3, #2
  }
}
 800282e:	4618      	mov	r0, r3
 8002830:	3728      	adds	r7, #40	@ 0x28
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40008000 	.word	0x40008000

0800283c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002858:	b08a      	sub	sp, #40	@ 0x28
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	431a      	orrs	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	431a      	orrs	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	4313      	orrs	r3, r2
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4ba4      	ldr	r3, [pc, #656]	@ (8002b14 <UART_SetConfig+0x2c0>)
 8002884:	4013      	ands	r3, r2
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800288c:	430b      	orrs	r3, r1
 800288e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a99      	ldr	r2, [pc, #612]	@ (8002b18 <UART_SetConfig+0x2c4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d004      	beq.n	80028c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028bc:	4313      	orrs	r3, r2
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d0:	430a      	orrs	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a90      	ldr	r2, [pc, #576]	@ (8002b1c <UART_SetConfig+0x2c8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d126      	bne.n	800292c <UART_SetConfig+0xd8>
 80028de:	4b90      	ldr	r3, [pc, #576]	@ (8002b20 <UART_SetConfig+0x2cc>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d81b      	bhi.n	8002924 <UART_SetConfig+0xd0>
 80028ec:	a201      	add	r2, pc, #4	@ (adr r2, 80028f4 <UART_SetConfig+0xa0>)
 80028ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f2:	bf00      	nop
 80028f4:	08002905 	.word	0x08002905
 80028f8:	08002915 	.word	0x08002915
 80028fc:	0800290d 	.word	0x0800290d
 8002900:	0800291d 	.word	0x0800291d
 8002904:	2301      	movs	r3, #1
 8002906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800290a:	e116      	b.n	8002b3a <UART_SetConfig+0x2e6>
 800290c:	2302      	movs	r3, #2
 800290e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002912:	e112      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002914:	2304      	movs	r3, #4
 8002916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800291a:	e10e      	b.n	8002b3a <UART_SetConfig+0x2e6>
 800291c:	2308      	movs	r3, #8
 800291e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002922:	e10a      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002924:	2310      	movs	r3, #16
 8002926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800292a:	e106      	b.n	8002b3a <UART_SetConfig+0x2e6>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a7c      	ldr	r2, [pc, #496]	@ (8002b24 <UART_SetConfig+0x2d0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d138      	bne.n	80029a8 <UART_SetConfig+0x154>
 8002936:	4b7a      	ldr	r3, [pc, #488]	@ (8002b20 <UART_SetConfig+0x2cc>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b0c      	cmp	r3, #12
 8002942:	d82d      	bhi.n	80029a0 <UART_SetConfig+0x14c>
 8002944:	a201      	add	r2, pc, #4	@ (adr r2, 800294c <UART_SetConfig+0xf8>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	08002981 	.word	0x08002981
 8002950:	080029a1 	.word	0x080029a1
 8002954:	080029a1 	.word	0x080029a1
 8002958:	080029a1 	.word	0x080029a1
 800295c:	08002991 	.word	0x08002991
 8002960:	080029a1 	.word	0x080029a1
 8002964:	080029a1 	.word	0x080029a1
 8002968:	080029a1 	.word	0x080029a1
 800296c:	08002989 	.word	0x08002989
 8002970:	080029a1 	.word	0x080029a1
 8002974:	080029a1 	.word	0x080029a1
 8002978:	080029a1 	.word	0x080029a1
 800297c:	08002999 	.word	0x08002999
 8002980:	2300      	movs	r3, #0
 8002982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002986:	e0d8      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002988:	2302      	movs	r3, #2
 800298a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800298e:	e0d4      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002990:	2304      	movs	r3, #4
 8002992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002996:	e0d0      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002998:	2308      	movs	r3, #8
 800299a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800299e:	e0cc      	b.n	8002b3a <UART_SetConfig+0x2e6>
 80029a0:	2310      	movs	r3, #16
 80029a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029a6:	e0c8      	b.n	8002b3a <UART_SetConfig+0x2e6>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a5e      	ldr	r2, [pc, #376]	@ (8002b28 <UART_SetConfig+0x2d4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d125      	bne.n	80029fe <UART_SetConfig+0x1aa>
 80029b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b20 <UART_SetConfig+0x2cc>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80029bc:	2b30      	cmp	r3, #48	@ 0x30
 80029be:	d016      	beq.n	80029ee <UART_SetConfig+0x19a>
 80029c0:	2b30      	cmp	r3, #48	@ 0x30
 80029c2:	d818      	bhi.n	80029f6 <UART_SetConfig+0x1a2>
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d00a      	beq.n	80029de <UART_SetConfig+0x18a>
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d814      	bhi.n	80029f6 <UART_SetConfig+0x1a2>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <UART_SetConfig+0x182>
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d008      	beq.n	80029e6 <UART_SetConfig+0x192>
 80029d4:	e00f      	b.n	80029f6 <UART_SetConfig+0x1a2>
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029dc:	e0ad      	b.n	8002b3a <UART_SetConfig+0x2e6>
 80029de:	2302      	movs	r3, #2
 80029e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e4:	e0a9      	b.n	8002b3a <UART_SetConfig+0x2e6>
 80029e6:	2304      	movs	r3, #4
 80029e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ec:	e0a5      	b.n	8002b3a <UART_SetConfig+0x2e6>
 80029ee:	2308      	movs	r3, #8
 80029f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f4:	e0a1      	b.n	8002b3a <UART_SetConfig+0x2e6>
 80029f6:	2310      	movs	r3, #16
 80029f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fc:	e09d      	b.n	8002b3a <UART_SetConfig+0x2e6>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a4a      	ldr	r2, [pc, #296]	@ (8002b2c <UART_SetConfig+0x2d8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d125      	bne.n	8002a54 <UART_SetConfig+0x200>
 8002a08:	4b45      	ldr	r3, [pc, #276]	@ (8002b20 <UART_SetConfig+0x2cc>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a12:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a14:	d016      	beq.n	8002a44 <UART_SetConfig+0x1f0>
 8002a16:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a18:	d818      	bhi.n	8002a4c <UART_SetConfig+0x1f8>
 8002a1a:	2b80      	cmp	r3, #128	@ 0x80
 8002a1c:	d00a      	beq.n	8002a34 <UART_SetConfig+0x1e0>
 8002a1e:	2b80      	cmp	r3, #128	@ 0x80
 8002a20:	d814      	bhi.n	8002a4c <UART_SetConfig+0x1f8>
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <UART_SetConfig+0x1d8>
 8002a26:	2b40      	cmp	r3, #64	@ 0x40
 8002a28:	d008      	beq.n	8002a3c <UART_SetConfig+0x1e8>
 8002a2a:	e00f      	b.n	8002a4c <UART_SetConfig+0x1f8>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a32:	e082      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002a34:	2302      	movs	r3, #2
 8002a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a3a:	e07e      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a42:	e07a      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002a44:	2308      	movs	r3, #8
 8002a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a4a:	e076      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a52:	e072      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a35      	ldr	r2, [pc, #212]	@ (8002b30 <UART_SetConfig+0x2dc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d12a      	bne.n	8002ab4 <UART_SetConfig+0x260>
 8002a5e:	4b30      	ldr	r3, [pc, #192]	@ (8002b20 <UART_SetConfig+0x2cc>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a6c:	d01a      	beq.n	8002aa4 <UART_SetConfig+0x250>
 8002a6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a72:	d81b      	bhi.n	8002aac <UART_SetConfig+0x258>
 8002a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a78:	d00c      	beq.n	8002a94 <UART_SetConfig+0x240>
 8002a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a7e:	d815      	bhi.n	8002aac <UART_SetConfig+0x258>
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <UART_SetConfig+0x238>
 8002a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a88:	d008      	beq.n	8002a9c <UART_SetConfig+0x248>
 8002a8a:	e00f      	b.n	8002aac <UART_SetConfig+0x258>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a92:	e052      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002a94:	2302      	movs	r3, #2
 8002a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9a:	e04e      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa2:	e04a      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aaa:	e046      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002aac:	2310      	movs	r3, #16
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab2:	e042      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a17      	ldr	r2, [pc, #92]	@ (8002b18 <UART_SetConfig+0x2c4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d13a      	bne.n	8002b34 <UART_SetConfig+0x2e0>
 8002abe:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <UART_SetConfig+0x2cc>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ac8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002acc:	d01a      	beq.n	8002b04 <UART_SetConfig+0x2b0>
 8002ace:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ad2:	d81b      	bhi.n	8002b0c <UART_SetConfig+0x2b8>
 8002ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ad8:	d00c      	beq.n	8002af4 <UART_SetConfig+0x2a0>
 8002ada:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ade:	d815      	bhi.n	8002b0c <UART_SetConfig+0x2b8>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <UART_SetConfig+0x298>
 8002ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ae8:	d008      	beq.n	8002afc <UART_SetConfig+0x2a8>
 8002aea:	e00f      	b.n	8002b0c <UART_SetConfig+0x2b8>
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002af2:	e022      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002af4:	2302      	movs	r3, #2
 8002af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002afa:	e01e      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002afc:	2304      	movs	r3, #4
 8002afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b02:	e01a      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002b04:	2308      	movs	r3, #8
 8002b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0a:	e016      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b12:	e012      	b.n	8002b3a <UART_SetConfig+0x2e6>
 8002b14:	efff69f3 	.word	0xefff69f3
 8002b18:	40008000 	.word	0x40008000
 8002b1c:	40013800 	.word	0x40013800
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40004400 	.word	0x40004400
 8002b28:	40004800 	.word	0x40004800
 8002b2c:	40004c00 	.word	0x40004c00
 8002b30:	40005000 	.word	0x40005000
 8002b34:	2310      	movs	r3, #16
 8002b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a9f      	ldr	r2, [pc, #636]	@ (8002dbc <UART_SetConfig+0x568>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d17a      	bne.n	8002c3a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d824      	bhi.n	8002b96 <UART_SetConfig+0x342>
 8002b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b54 <UART_SetConfig+0x300>)
 8002b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b52:	bf00      	nop
 8002b54:	08002b79 	.word	0x08002b79
 8002b58:	08002b97 	.word	0x08002b97
 8002b5c:	08002b81 	.word	0x08002b81
 8002b60:	08002b97 	.word	0x08002b97
 8002b64:	08002b87 	.word	0x08002b87
 8002b68:	08002b97 	.word	0x08002b97
 8002b6c:	08002b97 	.word	0x08002b97
 8002b70:	08002b97 	.word	0x08002b97
 8002b74:	08002b8f 	.word	0x08002b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b78:	f7fe ffe6 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002b7c:	61f8      	str	r0, [r7, #28]
        break;
 8002b7e:	e010      	b.n	8002ba2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b80:	4b8f      	ldr	r3, [pc, #572]	@ (8002dc0 <UART_SetConfig+0x56c>)
 8002b82:	61fb      	str	r3, [r7, #28]
        break;
 8002b84:	e00d      	b.n	8002ba2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b86:	f7fe ff47 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 8002b8a:	61f8      	str	r0, [r7, #28]
        break;
 8002b8c:	e009      	b.n	8002ba2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b92:	61fb      	str	r3, [r7, #28]
        break;
 8002b94:	e005      	b.n	8002ba2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ba0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80fb 	beq.w	8002da0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d305      	bcc.n	8002bc6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d903      	bls.n	8002bce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bcc:	e0e8      	b.n	8002da0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	461c      	mov	r4, r3
 8002bd4:	4615      	mov	r5, r2
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	022b      	lsls	r3, r5, #8
 8002be0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002be4:	0222      	lsls	r2, r4, #8
 8002be6:	68f9      	ldr	r1, [r7, #12]
 8002be8:	6849      	ldr	r1, [r1, #4]
 8002bea:	0849      	lsrs	r1, r1, #1
 8002bec:	2000      	movs	r0, #0
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4681      	mov	r9, r0
 8002bf2:	eb12 0a08 	adds.w	sl, r2, r8
 8002bf6:	eb43 0b09 	adc.w	fp, r3, r9
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c08:	4650      	mov	r0, sl
 8002c0a:	4659      	mov	r1, fp
 8002c0c:	f7fd faee 	bl	80001ec <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c1e:	d308      	bcc.n	8002c32 <UART_SetConfig+0x3de>
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c26:	d204      	bcs.n	8002c32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	e0b6      	b.n	8002da0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c38:	e0b2      	b.n	8002da0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c42:	d15e      	bne.n	8002d02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002c44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d828      	bhi.n	8002c9e <UART_SetConfig+0x44a>
 8002c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c54 <UART_SetConfig+0x400>)
 8002c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c52:	bf00      	nop
 8002c54:	08002c79 	.word	0x08002c79
 8002c58:	08002c81 	.word	0x08002c81
 8002c5c:	08002c89 	.word	0x08002c89
 8002c60:	08002c9f 	.word	0x08002c9f
 8002c64:	08002c8f 	.word	0x08002c8f
 8002c68:	08002c9f 	.word	0x08002c9f
 8002c6c:	08002c9f 	.word	0x08002c9f
 8002c70:	08002c9f 	.word	0x08002c9f
 8002c74:	08002c97 	.word	0x08002c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c78:	f7fe ff66 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002c7c:	61f8      	str	r0, [r7, #28]
        break;
 8002c7e:	e014      	b.n	8002caa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c80:	f7fe ff78 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8002c84:	61f8      	str	r0, [r7, #28]
        break;
 8002c86:	e010      	b.n	8002caa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c88:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc0 <UART_SetConfig+0x56c>)
 8002c8a:	61fb      	str	r3, [r7, #28]
        break;
 8002c8c:	e00d      	b.n	8002caa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c8e:	f7fe fec3 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 8002c92:	61f8      	str	r0, [r7, #28]
        break;
 8002c94:	e009      	b.n	8002caa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c9a:	61fb      	str	r3, [r7, #28]
        break;
 8002c9c:	e005      	b.n	8002caa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d077      	beq.n	8002da0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005a      	lsls	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	441a      	add	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b0f      	cmp	r3, #15
 8002cca:	d916      	bls.n	8002cfa <UART_SetConfig+0x4a6>
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd2:	d212      	bcs.n	8002cfa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f023 030f 	bic.w	r3, r3, #15
 8002cdc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	8afb      	ldrh	r3, [r7, #22]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	8afa      	ldrh	r2, [r7, #22]
 8002cf6:	60da      	str	r2, [r3, #12]
 8002cf8:	e052      	b.n	8002da0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d00:	e04e      	b.n	8002da0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d827      	bhi.n	8002d5a <UART_SetConfig+0x506>
 8002d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d10 <UART_SetConfig+0x4bc>)
 8002d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d10:	08002d35 	.word	0x08002d35
 8002d14:	08002d3d 	.word	0x08002d3d
 8002d18:	08002d45 	.word	0x08002d45
 8002d1c:	08002d5b 	.word	0x08002d5b
 8002d20:	08002d4b 	.word	0x08002d4b
 8002d24:	08002d5b 	.word	0x08002d5b
 8002d28:	08002d5b 	.word	0x08002d5b
 8002d2c:	08002d5b 	.word	0x08002d5b
 8002d30:	08002d53 	.word	0x08002d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d34:	f7fe ff08 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002d38:	61f8      	str	r0, [r7, #28]
        break;
 8002d3a:	e014      	b.n	8002d66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d3c:	f7fe ff1a 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8002d40:	61f8      	str	r0, [r7, #28]
        break;
 8002d42:	e010      	b.n	8002d66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d44:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc0 <UART_SetConfig+0x56c>)
 8002d46:	61fb      	str	r3, [r7, #28]
        break;
 8002d48:	e00d      	b.n	8002d66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d4a:	f7fe fe65 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 8002d4e:	61f8      	str	r0, [r7, #28]
        break;
 8002d50:	e009      	b.n	8002d66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d56:	61fb      	str	r3, [r7, #28]
        break;
 8002d58:	e005      	b.n	8002d66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d64:	bf00      	nop
    }

    if (pclk != 0U)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d019      	beq.n	8002da0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	085a      	lsrs	r2, r3, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	441a      	add	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b0f      	cmp	r3, #15
 8002d84:	d909      	bls.n	8002d9a <UART_SetConfig+0x546>
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d8c:	d205      	bcs.n	8002d9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60da      	str	r2, [r3, #12]
 8002d98:	e002      	b.n	8002da0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002dac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3728      	adds	r7, #40	@ 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dba:	bf00      	nop
 8002dbc:	40008000 	.word	0x40008000
 8002dc0:	00f42400 	.word	0x00f42400

08002dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01a      	beq.n	8002eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ec2:	d10a      	bne.n	8002eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
  }
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b098      	sub	sp, #96	@ 0x60
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f18:	f7fd fd54 	bl	80009c4 <HAL_GetTick>
 8002f1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d12e      	bne.n	8002f8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f34:	2200      	movs	r2, #0
 8002f36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f88c 	bl	8003058 <UART_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d021      	beq.n	8002f8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f6c:	e841 2300 	strex	r3, r2, [r1]
 8002f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e6      	bne.n	8002f46 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e062      	b.n	8003050 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d149      	bne.n	800302c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f856 	bl	8003058 <UART_WaitOnFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d03c      	beq.n	800302c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	e853 3f00 	ldrex	r3, [r3]
 8002fbe:	623b      	str	r3, [r7, #32]
   return(result);
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fd8:	e841 2300 	strex	r3, r2, [r1]
 8002fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e6      	bne.n	8002fb2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3308      	adds	r3, #8
 8002fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	e853 3f00 	ldrex	r3, [r3]
 8002ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3308      	adds	r3, #8
 8003002:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003004:	61fa      	str	r2, [r7, #28]
 8003006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003008:	69b9      	ldr	r1, [r7, #24]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	e841 2300 	strex	r3, r2, [r1]
 8003010:	617b      	str	r3, [r7, #20]
   return(result);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e5      	bne.n	8002fe4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e011      	b.n	8003050 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3758      	adds	r7, #88	@ 0x58
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003068:	e049      	b.n	80030fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d045      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7fd fca7 	bl	80009c4 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <UART_WaitOnFlagUntilTimeout+0x30>
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e048      	b.n	800311e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	d031      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d110      	bne.n	80030ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2208      	movs	r2, #8
 80030ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f8ff 	bl	80032b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2208      	movs	r2, #8
 80030ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e029      	b.n	800311e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d8:	d111      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f8e5 	bl	80032b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e00f      	b.n	800311e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4013      	ands	r3, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	bf0c      	ite	eq
 800310e:	2301      	moveq	r3, #1
 8003110:	2300      	movne	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	429a      	cmp	r2, r3
 800311a:	d0a6      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003128:	b480      	push	{r7}
 800312a:	b097      	sub	sp, #92	@ 0x5c
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800315a:	d10e      	bne.n	800317a <UART_Start_Receive_IT+0x52>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <UART_Start_Receive_IT+0x48>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800316a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800316e:	e02d      	b.n	80031cc <UART_Start_Receive_IT+0xa4>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	22ff      	movs	r2, #255	@ 0xff
 8003174:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003178:	e028      	b.n	80031cc <UART_Start_Receive_IT+0xa4>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10d      	bne.n	800319e <UART_Start_Receive_IT+0x76>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <UART_Start_Receive_IT+0x6c>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	22ff      	movs	r2, #255	@ 0xff
 800318e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003192:	e01b      	b.n	80031cc <UART_Start_Receive_IT+0xa4>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	227f      	movs	r2, #127	@ 0x7f
 8003198:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800319c:	e016      	b.n	80031cc <UART_Start_Receive_IT+0xa4>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031a6:	d10d      	bne.n	80031c4 <UART_Start_Receive_IT+0x9c>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d104      	bne.n	80031ba <UART_Start_Receive_IT+0x92>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	227f      	movs	r2, #127	@ 0x7f
 80031b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80031b8:	e008      	b.n	80031cc <UART_Start_Receive_IT+0xa4>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	223f      	movs	r2, #63	@ 0x3f
 80031be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80031c2:	e003      	b.n	80031cc <UART_Start_Receive_IT+0xa4>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2222      	movs	r2, #34	@ 0x22
 80031d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3308      	adds	r3, #8
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3308      	adds	r3, #8
 80031fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80031fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80031fe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003202:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800320a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003218:	d107      	bne.n	800322a <UART_Start_Receive_IT+0x102>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4a21      	ldr	r2, [pc, #132]	@ (80032ac <UART_Start_Receive_IT+0x184>)
 8003226:	669a      	str	r2, [r3, #104]	@ 0x68
 8003228:	e002      	b.n	8003230 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a20      	ldr	r2, [pc, #128]	@ (80032b0 <UART_Start_Receive_IT+0x188>)
 800322e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d019      	beq.n	800326c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003240:	e853 3f00 	ldrex	r3, [r3]
 8003244:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800324c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003256:	637b      	str	r3, [r7, #52]	@ 0x34
 8003258:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800325c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e6      	bne.n	8003238 <UART_Start_Receive_IT+0x110>
 800326a:	e018      	b.n	800329e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	613b      	str	r3, [r7, #16]
   return(result);
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f043 0320 	orr.w	r3, r3, #32
 8003280:	653b      	str	r3, [r7, #80]	@ 0x50
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800328a:	623b      	str	r3, [r7, #32]
 800328c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328e:	69f9      	ldr	r1, [r7, #28]
 8003290:	6a3a      	ldr	r2, [r7, #32]
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	61bb      	str	r3, [r7, #24]
   return(result);
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1e6      	bne.n	800326c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	375c      	adds	r7, #92	@ 0x5c
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	08003539 	.word	0x08003539
 80032b0:	0800337d 	.word	0x0800337d

080032b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b095      	sub	sp, #84	@ 0x54
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032da:	643b      	str	r3, [r7, #64]	@ 0x40
 80032dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e6      	bne.n	80032bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3308      	adds	r3, #8
 80032f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3308      	adds	r3, #8
 800330c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800330e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003310:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003314:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e5      	bne.n	80032ee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003326:	2b01      	cmp	r3, #1
 8003328:	d118      	bne.n	800335c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	60bb      	str	r3, [r7, #8]
   return(result);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f023 0310 	bic.w	r3, r3, #16
 800333e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6979      	ldr	r1, [r7, #20]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	613b      	str	r3, [r7, #16]
   return(result);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e6      	bne.n	800332a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003370:	bf00      	nop
 8003372:	3754      	adds	r7, #84	@ 0x54
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b09c      	sub	sp, #112	@ 0x70
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800338a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003394:	2b22      	cmp	r3, #34	@ 0x22
 8003396:	f040 80be 	bne.w	8003516 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80033a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80033a8:	b2d9      	uxtb	r1, r3
 80033aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	400a      	ands	r2, r1
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 80a3 	bne.w	800352a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003402:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003404:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003408:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e6      	bne.n	80033e4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3308      	adds	r3, #8
 800341c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	667b      	str	r3, [r7, #100]	@ 0x64
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3308      	adds	r3, #8
 8003434:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003436:	647a      	str	r2, [r7, #68]	@ 0x44
 8003438:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800343c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e5      	bne.n	8003416 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2220      	movs	r2, #32
 800344e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a34      	ldr	r2, [pc, #208]	@ (8003534 <UART_RxISR_8BIT+0x1b8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d01f      	beq.n	80034a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d018      	beq.n	80034a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	623b      	str	r3, [r7, #32]
   return(result);
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800348a:	663b      	str	r3, [r7, #96]	@ 0x60
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003494:	633b      	str	r3, [r7, #48]	@ 0x30
 8003496:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800349a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e6      	bne.n	8003476 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d12e      	bne.n	800350e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	e853 3f00 	ldrex	r3, [r3]
 80034c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0310 	bic.w	r3, r3, #16
 80034ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	69b9      	ldr	r1, [r7, #24]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	617b      	str	r3, [r7, #20]
   return(result);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e6      	bne.n	80034b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d103      	bne.n	80034fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2210      	movs	r2, #16
 80034fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff f998 	bl	800283c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800350c:	e00d      	b.n	800352a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd f8e6 	bl	80006e0 <HAL_UART_RxCpltCallback>
}
 8003514:	e009      	b.n	800352a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	8b1b      	ldrh	r3, [r3, #24]
 800351c:	b29a      	uxth	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0208 	orr.w	r2, r2, #8
 8003526:	b292      	uxth	r2, r2
 8003528:	831a      	strh	r2, [r3, #24]
}
 800352a:	bf00      	nop
 800352c:	3770      	adds	r7, #112	@ 0x70
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40008000 	.word	0x40008000

08003538 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b09c      	sub	sp, #112	@ 0x70
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003546:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003550:	2b22      	cmp	r3, #34	@ 0x22
 8003552:	f040 80be 	bne.w	80036d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800355c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003564:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003566:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800356a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800356e:	4013      	ands	r3, r2
 8003570:	b29a      	uxth	r2, r3
 8003572:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003574:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357a:	1c9a      	adds	r2, r3, #2
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 80a3 	bne.w	80036e6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80035ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035be:	657b      	str	r3, [r7, #84]	@ 0x54
 80035c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80035c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035c6:	e841 2300 	strex	r3, r2, [r1]
 80035ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80035cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e6      	bne.n	80035a0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3308      	adds	r3, #8
 80035d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3308      	adds	r3, #8
 80035f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80035f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80035f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e5      	bne.n	80035d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a34      	ldr	r2, [pc, #208]	@ (80036f0 <UART_RxISR_16BIT+0x1b8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d01f      	beq.n	8003664 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d018      	beq.n	8003664 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003646:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003652:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e6      	bne.n	8003632 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003668:	2b01      	cmp	r3, #1
 800366a:	d12e      	bne.n	80036ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f023 0310 	bic.w	r3, r3, #16
 8003686:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	6979      	ldr	r1, [r7, #20]
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	613b      	str	r3, [r7, #16]
   return(result);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e6      	bne.n	8003672 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d103      	bne.n	80036ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2210      	movs	r2, #16
 80036b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff f8ba 	bl	800283c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036c8:	e00d      	b.n	80036e6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd f808 	bl	80006e0 <HAL_UART_RxCpltCallback>
}
 80036d0:	e009      	b.n	80036e6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	8b1b      	ldrh	r3, [r3, #24]
 80036d8:	b29a      	uxth	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0208 	orr.w	r2, r2, #8
 80036e2:	b292      	uxth	r2, r2
 80036e4:	831a      	strh	r2, [r3, #24]
}
 80036e6:	bf00      	nop
 80036e8:	3770      	adds	r7, #112	@ 0x70
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40008000 	.word	0x40008000

080036f4 <memset>:
 80036f4:	4402      	add	r2, r0
 80036f6:	4603      	mov	r3, r0
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d100      	bne.n	80036fe <memset+0xa>
 80036fc:	4770      	bx	lr
 80036fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003702:	e7f9      	b.n	80036f8 <memset+0x4>

08003704 <__libc_init_array>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4d0d      	ldr	r5, [pc, #52]	@ (800373c <__libc_init_array+0x38>)
 8003708:	4c0d      	ldr	r4, [pc, #52]	@ (8003740 <__libc_init_array+0x3c>)
 800370a:	1b64      	subs	r4, r4, r5
 800370c:	10a4      	asrs	r4, r4, #2
 800370e:	2600      	movs	r6, #0
 8003710:	42a6      	cmp	r6, r4
 8003712:	d109      	bne.n	8003728 <__libc_init_array+0x24>
 8003714:	4d0b      	ldr	r5, [pc, #44]	@ (8003744 <__libc_init_array+0x40>)
 8003716:	4c0c      	ldr	r4, [pc, #48]	@ (8003748 <__libc_init_array+0x44>)
 8003718:	f000 f818 	bl	800374c <_init>
 800371c:	1b64      	subs	r4, r4, r5
 800371e:	10a4      	asrs	r4, r4, #2
 8003720:	2600      	movs	r6, #0
 8003722:	42a6      	cmp	r6, r4
 8003724:	d105      	bne.n	8003732 <__libc_init_array+0x2e>
 8003726:	bd70      	pop	{r4, r5, r6, pc}
 8003728:	f855 3b04 	ldr.w	r3, [r5], #4
 800372c:	4798      	blx	r3
 800372e:	3601      	adds	r6, #1
 8003730:	e7ee      	b.n	8003710 <__libc_init_array+0xc>
 8003732:	f855 3b04 	ldr.w	r3, [r5], #4
 8003736:	4798      	blx	r3
 8003738:	3601      	adds	r6, #1
 800373a:	e7f2      	b.n	8003722 <__libc_init_array+0x1e>
 800373c:	080037b4 	.word	0x080037b4
 8003740:	080037b4 	.word	0x080037b4
 8003744:	080037b4 	.word	0x080037b4
 8003748:	080037b8 	.word	0x080037b8

0800374c <_init>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	bf00      	nop
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr

08003758 <_fini>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr
